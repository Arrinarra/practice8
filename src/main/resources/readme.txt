Инструкция по сборке и запуску приложения "Симулятор экзамена"

==================
Сборка приложения
==================

1. Требования к системе:
   - Установленная Java Development Kit (JDK) версии 1.8 или выше
   - Установленный Apache Maven
   - Командная строка (Terminal, CMD, PowerShell)

2. Сборка JAR-файла:
   а) Откройте командную строку
   б) Перейдите в корневую директорию проекта (где находится pom.xml)
   в) Выполните команду:
        mvn clean package
   
   г) После успешной сборки:
      - Исполняемый JAR-файл будет создан в папке: target/exam-simulation-1.0.jar
      - Зависимые библиотеки будут включены в JAR (если имеются)

3. Возможные проблемы при сборке:
   - Ошибка версии JDK: убедитесь, что JAVA_HOME указывает на JDK 1.8+
   - Ошибки зависимостей: выполните mvn clean install -U
   - Проблемы с кодировкой: добавьте в pom.xml <properties><project.build.sourceEncoding>UTF-8</...>

================
Запуск приложения
================

1. Базовый запуск:
   java -jar target/exam-simulation-1.0.jar <количество_студентов>
   
   Пример для 5 студентов:
        java -jar target/exam-simulation-1.0.jar 5

2. Требования к аргументам:
   - <количество_студентов> должно быть целым числом ≥ 2
   - При некорректном вводе будет выведено сообщение об ошибке

3. Параметры запуска JVM (опционально):
   - Задание размера памяти: 
        java -Xmx512m -jar target/exam-simulation-1.0.jar 10
   - Включение подробного логирования:
        java -Ddebug=true -jar target/exam-simulation-1.0.jar 7

=========================
Руководство пользователя
=========================

1. Описание программы:
   Приложение моделирует процесс сдачи экзамена со следующими участниками:
   - Студенты (потоки): передают шпаргалки друг другу
   - Преподаватель (поток): отслеживает попытки списывания
   - Шпаргалки (разделяемые ресурсы): 2 экземпляра с блокировками
   - Контроллер: управляет логикой экзамена

2. Логика работы:
   а) Инициализация:
      - Создается указанное количество студентов
      - Две шпаргалки распределяются между первыми двумя студентами
   
   б) Процесс экзамена:
      - Каждые 100-500 мс студент пытается передать шпаргалку
      - Преподаватель проверяет аудиторию каждые 500-2000 мс
      - При передаче шпаргалки увеличивается счетчик использования у студента
   
   в) Условия завершения:
      УСПЕХ: Все студенты использовали шпаргалку ≥ 3 раз
        >> "Экзамен завершен! Все студенты сдали на отлично."
      
      ПРОВАЛ: Преподаватель обнаружил свободную шпаргалку
        >> "Преподаватель поймал студентов... Все получили неудовлетворительно."

3. Примеры работы:

   Пример 1: Успешная сдача
        Ввод: java -jar exam-simulation-1.0.jar 3
        Вывод: Экзамен завершен! Все студенты сдали на отлично.

   Пример 2: Обнаружение списывания
        Ввод: java -jar exam-simulation-1.0.jar 4
        Вывод: Преподаватель поймал студентов... Все получили неудовлетворительно.

4. Ограничения:
   - Максимальное время выполнения: 1 час (автоматическое завершение)
   - Минимальное количество студентов: 2
   - Стартовые владельцы шпаргалок: первые два студента

5. Технические детали:
   - Синхронизация: ReentrantLock для шпаргалок
   - Управление потоками: ExecutorService с фиксированным пулом
   - Проверка состояния: volatile-флаг examFinished

========================
Диагностика проблем
========================

1. Ошибка при запуске:
   "Error: Could not find or load main class"
   - Убедитесь, что сборка выполнена без ошибок
   - Проверьте наличие MANIFEST.MF в JAR: jar tf exam-simulation-1.0.jar

2. Зависание программы:
   - Проверьте логику завершения в ExamController
   - Увеличьте время ожидания в main-методе (awaitTermination)

3. Неожиданное завершение:
   - Проверьте аргументы командной строки
   - Добавьте логирование в transferCheatSheet метод

Для модификации программы исходный код доступен в пакетах:
   src/main/java/
   - ExamSimulation.java       : Точка входа
   - Student.java              : Логика студентов
   - Teacher.java              : Логика преподавателя
   - CheatSheet.java           : Модель шпаргалки
   - ExamController.java       : Управление экзаменом